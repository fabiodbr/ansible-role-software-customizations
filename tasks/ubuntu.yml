---
- name: "Installing fabiodbr-ubuntu-customizations for Ubuntu 20.04 (focal)"
  assert:
    that:
      - ansible_distribution == 'Ubuntu'
      - ansible_distribution_version == '20.04'
      - ansible_distribution_release == 'focal'
    msg: "ABORTING: This appears to be {{ ansible_distribution }} {{ ansible_distribution_version }} ({{ ansible_distribution_release }})"

- name: "sudoers: Don't prompt for password"
  when: '"sudoers" is defined and "sudoers" in configure'
  notify: logout required
  lineinfile:
    path: /etc/sudoers
    line: "{{ user }} ALL=(ALL) NOPASSWD:ALL"
    insertafter: EOF
    validate: "/usr/sbin/visudo -cf %s"

- name: "Remove Ubuntu Dock"
  when: '"remove-ubuntu-dock" is defined and "remove-ubuntu-dock" in configure'
  notify: logout required
  apt:
    name: gnome-shell-extension-ubuntu-dock
    state: absent

- name: Use gnome keyring credential helper (gui password prompt)
  when: '"gnome-keyring-credential-helper" is defined and "gnome-keyring-credential-helper" in configure'
  block:
    - name: "[gnome-keyring-credential-helper]: packages"
      apt:
        name: "{{ item }}"
        state: latest
      loop:
        - libsecret-1-0
        - libsecret-1-dev
    - name: "[gnome-keyring-credential-helper]: verify if already compiled"
      stat:
        path: /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret
      register: git_credential
    - name: "[gnome-keyring-credential-helper]: build library"
      when: not git_credential.stat.exists
      make:
        chdir: /usr/share/doc/git/contrib/credential/libsecret
        target: all
    - name: "[gnome-keyring-credential-helper]: configure git global credential.helper"
      become: yes
      become_user: "{{ user }}"
      git_config:
        name: credential.helper
        scope: global
        value: "/usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret"
      changed_when: False

# - name: zsh themes
#   git:
#     repo: https://github.com/romkatv/powerlevel10k.git
#     dest: /tmp/
#     depth: 1

- name: Terminator with Nord theme
  when: '"terminator-nord-theme" is defined and "terminator-nord-theme" in configure'
  block:
    - name: "Terminator config file"
      stat:
        path: "/home/{{ user }}/.config/terminator/config"
      register: terminator_config
    - name: "terminator: nord theme"
      when: not terminator_config.stat.exists
      block:
        - name: "Terminator: create config directory"
          file:
            path: "/home/{{ user }}/.config/terminator"
            state: directory
            owner: "{{ user }}"
            group: "{{ user }}"
            mode: 0755
        - name: "Terminator: git clone"
          git:
            repo: https://github.com/arcticicestudio/nord-terminator.git
            dest: /tmp/nord
            depth: 1
            force: yes
        - name: "Terminator: copy"
          copy:
            src: "/tmp/nord/src/config"
            dest: "/home/{{ user }}/.config/terminator/config"
            owner: "{{ user }}"
            group: "{{ user }}"
            mode: 0644
        - name: "Terminator: replace"
          replace:
            dest: "/home/{{ user }}/.config/terminator/config"
            regexp: "nord"
            replace: "default"
        - name: "Terminator: lineinfile"
          lineinfile:
            dest: "/home/{{ user }}/.config/terminator/config"
            regexp: "^background_color"
            insertafter: "^background_color"
            line: "    {{ item.property }} = {{ item.value }}"
          loop:
            - { property: "background_darkness", value: "0.9" }
            - { property: "background_type", value: "transparent" }
            - { property: "scrollback_lines", value: "50000" }
            - { property: "font", value: "Liberation Mono 8" }
            - { property: "use_system_font", value: "False" }

- name: "Ram storage for /tmp directory"
  when: '"tmp-mount" is defined and "tmp-mount" in configure'
  block:
    - name: Copy tmp.mount template
      copy:
        src: /usr/share/systemd/tmp.mount
        dest: /etc/systemd/system/tmp.mount
    - name: Enable tmp.mount service
      systemd:
        name: tmp.mount
        enabled: yes

# For dual booting with Windows
- name: "timedatectl"
  when: '"timedatectl" is defined and "timedatectl" in configure'
  block:
    - name: "[timedatectl]: Adjust dual boot clock"
      command: "timedatectl set-local-rtc 0 --adjust-system-clock"
      changed_when: false

# Emoji with colors
- name: "color-emoji"
  when: '"color-emoji" is defined and "color-emoji" in configure'
  become: yes
  become_user: "{{ user }}"
  block:
    - name: "[font-color-emoji]: checking if already configured"
      stat:
        path: "/home/{{ user }}/.config/fontconfig/conf.d/01-emoji.conf"
      register: st
    - name: "[font-color-emoji]: installing..."
      when: not st.stat.exists
      block:
        - name: "[font-color-emoji]: apt install"
          become: yes
          apt:
            name: fonts-noto-color-emoji
            state: latest
            cache_valid_time: 3600
        - name: "[font-color-emoji]: creating directory"
          file:
            path: "/home/{{ user }}/.config/fontconfig/conf.d/"
            state: directory
            recurse: yes
        - name: "[font-color-emoji]: creating config file"
          copy:
            src: 01-emoji.conf
            dest: "/home/{{ user }}/.config/fontconfig/conf.d/"
        - name: "update font cache"
          command: fc-cache -f -v
